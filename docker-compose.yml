version: '3.8'

networks:
  msa-network:
    driver: bridge

services:
  # ===================
  # Kafka Cluster (3 brokers) - KRaft 모드
  # ===================

  # Kafka 브로커 1
  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://kafka1:29092,CONTROLLER://kafka1:9093,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      CLUSTER_ID: "iDr4EpfYTm641wEkI1uuXg"
    volumes:
      - "./kafka-data/kafka1:/var/lib/kafka/data"
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka 브로커 2
  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://kafka2:29092,CONTROLLER://kafka2:9093,PLAINTEXT_HOST://0.0.0.0:9094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9094"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      CLUSTER_ID: "iDr4EpfYTm641wEkI1uuXg"
    volumes:
      - "./kafka-data/kafka2:/var/lib/kafka/data"
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka 브로커 3
  kafka3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9096:9096"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://kafka3:29092,CONTROLLER://kafka3:9093,PLAINTEXT_HOST://0.0.0.0:9096"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:29092,PLAINTEXT_HOST://localhost:9096"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      CLUSTER_ID: "iDr4EpfYTm641wEkI1uuXg"
    volumes:
      - "./kafka-data/kafka3:/var/lib/kafka/data"
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9096"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafdrop - Kafka UI
  kafdro:
    image: obsidiandynamics/kafdrop
    hostname: kafdro
    container_name: kafdro
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:29092,kafka2:29092,kafka3:29092"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network

  # ===================
  # MSA Services
  # ===================

  api-gateway:
    build:
      context: ./api-gateway-service
      dockerfile: Dockerfile
    container_name: msa-api-gateway
    ports:
      - "8088:8088"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  member-service:
    build:
      context: ./member-service
      dockerfile: Dockerfile
    container_name: msa-member-service
    ports:
      - "8081:8081"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  front-service:
    build:
      context: ./front-service
      dockerfile: Dockerfile
    container_name: msa-front-service
    ports:
      - "8090:8090"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  management-service:
    build:
      context: ./management-service
      dockerfile: Dockerfile
    container_name: msa-management-service
    ports:
      - "8082:8082"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  stock-batch-service:
    build:
      context: ./stock-batch-service
      dockerfile: Dockerfile
    container_name: msa-stock-batch-service
    ports:
      - "8083:8083"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  kafka-service:
    build:
      context: ./kafka-service
      dockerfile: Dockerfile
    container_name: msa-kafka-service
    ports:
      - "8084:8084"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    restart: unless-stopped

  notify-service:
    build:
      context: ./notify-service
      dockerfile: Dockerfile
    container_name: msa-notify-service
    ports:
      - "8085:8085"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - msa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped